version: "3.9"

volumes:
  postgresql-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./postgresql/data
  policy-enforcement-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./policy-enforcement-data
  user-service-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./user-service

services:
  postgresql:
    image: postgres:15.12
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/db-files/
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost -p ${POSTGRES_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379:6379"


  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  celery_worker:
    build:
      context: ../services/analytics_service
      dockerfile: Dockerfile
    command: celery -A app.broker.celery.celery_worker worker --loglevel=info
    depends_on:
      - redis
      - analytics-service

  celery_beat:
    build:
      context: ../services/analytics_service
      dockerfile: Dockerfile
    command: celery -A app.broker.celery.celery_beat beat --loglevel=info
    depends_on:
      - redis
      - analytics-service


  policy-enforcement-service:
    build:
      context: ../services/policy_enforcer
      dockerfile: ./Dockerfile
    ports:
      - "5010:5010"
    volumes:
      - policy-enforcement-data:/mnt/
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      JWT_SECRET: ${JWT_SECRET}
      POLICIES_CONFIG_PATH: ${POLICIES_CONFIG_PATH}


  user-service:
    build:
      context: ../services/user_service
      dockerfile: ./Dockerfile
    ports:
      - "5001:5001"
    volumes:
      - user-service-data:/mnt/
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      PG_ASYNC_DSN: ${PG_ASYNC_DSN}
      JWT_SECRET: ${JWT_SECRET}
      RESET_PASSWORD_TOKEN_SECRET: ${RESET_PASSWORD_TOKEN_SECRET}
      VERIFICATION_TOKEN_SECRET: ${VERIFICATION_TOKEN_SECRET}
      DEFAULT_GROUPS_CONFIG_PATH: ${DEFAULT_GROUPS_CONFIG_PATH}


  music-service:
    build:
      context: ../services/music_service
      dockerfile: ./Dockerfile
    ports:
      - "5002:5002"
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      PG_ASYNC_DSN: ${PG_ASYNC_DSN}

  analytics-service:
    build:
      context: ../services/analytics_service
      dockerfile: ./Dockerfile
    ports:
      - "5003:5003"
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      PG_ASYNC_DSN: ${PG_ASYNC_DSN}
